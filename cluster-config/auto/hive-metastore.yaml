apiVersion: v1
kind: Service
metadata:
  name: hive-metastore
  namespace: dev
  labels:
    app: hive-metastore
spec:
  ports:
  - port: 9083
  selector:
    app: hive-metastore

---

apiVersion: v1
kind: Pod
metadata:
  name: hive-metastore
  namespace: dev
  labels:
    app: hive-metastore
spec:
  initContainers:
  - name: download-dependencies
    image: busybox:1.28
    command:
    - /bin/sh
    - -c
    - |
      wget -P /jars https://repo1.maven.org/maven2/org/apache/hadoop/hadoop-aws/3.2.2/hadoop-aws-3.2.2.jar \
      https://repo1.maven.org/maven2/org/postgresql/postgresql/42.7.2/postgresql-42.7.2.jar \
      https://repo1.maven.org/maven2/com/mysql/mysql-connector-j/8.2.0/mysql-connector-j-8.2.0.jar \
      https://repo1.maven.org/maven2/com/amazonaws/aws-java-sdk-bundle/1.12.676/aws-java-sdk-bundle-1.12.676.jar
    volumeMounts:
    - name: jar-volume
      mountPath: /jars
  containers:
  - name: hive-metastore
    image: apache/hive:3.1.3
    resources:
      limits:
        memory: 1G
        cpu: "1"
    env:
    - name: SERVICE_NAME
      value: "metastore"
    - name: AWS_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: minio-access-secret
          key: accessKey
    - name: AWS_SECRET_KEY
      valueFrom:
        secretKeyRef:
          name: minio-access-secret
          key: secretKey
    - name: DATABASE_HOST
      value: "mysql-metastore"
    - name: DATABASE_USER
      valueFrom:
        secretKeyRef: 
          name: mysql-secret
          key: user
    - name: DATABASE_PASSWORD
      valueFrom:
        secretKeyRef: 
          name: mysql-secret
          key: password
    - name: MINIO_URL
      value: "http://dev-minio:9000"
    ports:
    - containerPort: 9083
    command:
      - sh
      - "-c"
      - |
        /bin/bash <<'EOF'
        cp /jars/* /opt/hadoop/share/hadoop/common && 
        echo 'files copied'
        echo 'getting info of the schema if exists'
        /opt/hive/bin/schematool -info -dbType mysql -userName $DATABASE_USER -passWord $DATABASE_PASSWORD \
        -url jdbc:mysql://$DATABASE_HOST/metastore_db 2>&1 | tee testing_schema.txt
        echo 'verifying if schema exists'
        if grep -q '*** schemaTool failed ***' testing_schema.txt; then
          echo 'schema dont exists, running init schema'
          /opt/hive/bin/schematool -dbType mysql -initSchema --verbose \
          -url jdbc:mysql://$DATABASE_HOST/metastore_db?createDatabaseIfNotExist=true \
          -driver com.mysql.cj.jdbc.Driver \
          -userName $DATABASE_USER \
          -passWord $DATABASE_PASSWORD
        else
          echo 'schema already exists, skipping to init metastore'
        fi

        exec /opt/hive/bin/hive --skiphadoopversion --skiphbasecp --service metastore \
          --hiveconf javax.jdo.option.ConnectionURL=jdbc:mysql://$DATABASE_HOST/metastore_db \
          --hiveconf javax.jdo.option.ConnectionDriverName=com.mysql.cj.jdbc.Driver \
          --hiveconf javax.jdo.option.ConnectionUserName=$DATABASE_USER \
          --hiveconf javax.jdo.option.ConnectionPassword=$DATABASE_PASSWORD \
          --hiveconf fs.s3a.endpoint=$MINIO_URL \
          --hiveconf fs.s3a.impl=org.apache.hadoop.fs.s3a.S3AFileSystem \
          --hiveconf fs.s3a.aws.credentials.provider=com.amazonaws.auth.EnvironmentVariableCredentialsProvider \
          --hiveconf fs.defaultFS=$MINIO_URL \
          --hiveconf fs.s3a.connection.ssl.enabled=false \
          --hiveconf fs.s3a.path.style.access=true

        EOF
  
    volumeMounts:
    - name: jar-volume
      mountPath: /jars
  volumes:
  - name: jar-volume
    emptyDir: {}
